//I designed a signal repeater using Timer_A to light the red LED for the duration that button 1 is pressed. 
//If there is an overflow â€“ a signal that is greater 64k- the green LED with turn on and will stay on until button 2 resets the signal. 
//The timer is off until button 1 is pressed.

#include <msp430fr6989.h>

#define redLED BIT0 // Red LED at P1.0
#define greenLED BIT7 // Green LED at P9.7
#define BUT1 BIT1 // Button S1 at P1.1
#define BUT2 BIT2 // Button S2 at P1.2

void config_ACLK_to_32KHz_crystal() {
    // By default, ACLK runs on LFMODCLK at 5MHz/128 = 39 KHz

    // Reroute pins to LFXIN/LFXOUT functionality
    PJSEL1 &= ~BIT4;
    PJSEL0 |= BIT4;

    // Wait until the oscillator fault flags remain cleared
    CSCTL0 = CSKEY; // Unlock CS registers
    do {
        CSCTL5 &= ~LFXTOFFG; // Local fault flag
        SFRIFG1 &= ~OFIFG; // Global fault flag
    } while((CSCTL5 & LFXTOFFG) != 0);
    CSCTL0_H = 0; // Lock CS registers
    return;
}

void main(void) {
// Stop the Watchdog timer
    WDTCTL = WDTPW | WDTHOLD; 
// Unlock the GPIO pins
    PM5CTL0 &= ~LOCKLPM5; 

// Configure the LEDs as output
        P1DIR |= redLED; // Direct pin as output
        P9DIR |= greenLED; // Direct pin as output

        P1OUT &= ~redLED; // Turn LED Off
        P9OUT &= ~greenLED; // Turn LED Off

        // Configure buttons
        P1DIR &= ~BUT1; // Direct pin as input
        P1REN |= BUT1; // Enable built-in resistor
        P1OUT |= BUT1; // Set resistor as pull-up

        P1DIR &= ~BUT2; // Direct pin as input
        P1REN |= BUT2; // Enable built-in resistor
        P1OUT |= BUT2; // Set resistor as pull-up


// Configure ACLK to the 32 KHz crystal
    config_ACLK_to_32KHz_crystal();

    unsigned int i = 0; // keeps track of the test cases
    unsigned int length = 0; // keeps track of how long button is pressed

     // Infinite loop
    for(;;) {
        if(i == 0){ 
            if((P1IN & BUT1)== 0){ // button 1 pressed
                TA0CTL = TASSEL_1| ID_0 | MC_2 | TACLR; // timer turned on when button is pressed
                   TA0CTL &= ~TAIFG; // clear flag
                   i=1;
            }
        } else if (i == 1){
            if(TAIFG & TA0CTL){
                i = 2; // overflow occurred
                P9OUT |= greenLED;
                TA0CTL = 0;
            } else if ((P1IN & BUT1)!= 0){ // button released
               length = TA0R;
               TA0CTL = 0;
                P1OUT |= redLED;
                TA0CTL = TASSEL_1| ID_0 | MC_2 | TACLR;
                i=3;
            }
        } else if (i==3){ //red LED turns off after the length played
            if(TA0R >= length){
                P1OUT &= ~redLED;
                TA0CTL = 0;
                i = 0;
            }
        }else if (i == 2){
            if((P1IN & BUT2) == 0){ //reset when button 2 is pressed
                P9OUT &= ~greenLED;
                i=0;
            }
        }
    }
}
